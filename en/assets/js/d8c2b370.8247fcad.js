"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[927],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=d(a),u=r,k=m["".concat(s,".").concat(u)]||m[u]||p[u]||i;return a?n.createElement(k,l(l({ref:t},c),{},{components:a})):n.createElement(k,l({ref:t},c))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},68298:(e,t,a)=>{a.d(t,{d7:()=>i,tj:()=>r,zf:()=>l});var n=a(737);const r=e=>n.Z.get(`/courses/${e}/lessons`).then((e=>e.data)),i=(e,t)=>n.Z.get(`/courses/${e}/user_lessons/${t}`).then((e=>e.data)),l=e=>n.Z.get(`/course/${e}`).then((e=>e.data))},737:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(9669),r=a.n(n),i=a(15503);const l="https://api.wtf.academy/";console.log("BASE_URL: ",l);let o=r().create({baseURL:l,timeout:3e4});o.interceptors.request.use((async e=>{const t=localStorage.getItem("supabase.auth.token");if(t){let a=JSON.parse(t).currentSession.access_token;console.log("token\u8fc7\u671f\uff1a",t.expiresAt),+new Date>=1e3*t.expiresAt&&(console.log("\u8fc7\u671f"),a=await(0,i.dx)()),e.headers.Authorization=`Bearer ${a}`}return e}));const s=o},35857:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(67294),r=a(39960),i=a(27361),l=a.n(i);const o="quizFormBox_Dkfe",s="quizFormBtn_O5iQ";var d=a(99659),c=a(68298),p=a(95999);function m(e){const{courseId:t,lessonId:a}=e,{data:i}=(0,d.Z)((()=>(0,c.d7)(t,a)),{cacheKey:"lesson-share-"+a});return n.createElement("div",{className:o},n.createElement(r.Z,{className:s,to:l()(i,"data.lesson.viewform_url","")},n.createElement("p",null,n.createElement(p.Z,{id:"component.QuizForm.button.test"},"Test"))))}},71135:(e,t,a)=>{a.d(t,{Z:()=>u});var n=a(67294);const r="quizProgressBox_THJ5",i="quizProgressTime_ragV",l="quizProgressScore_n1kh";var o=a(27361),s=a.n(o),d=a(99659),c=a(68298),p=a(95999),m=a(52263);function u(e){var t;const{courseId:a,lessonId:o}=e,{data:u}=(0,d.Z)((()=>(0,c.d7)(a,o)),{cacheKey:"lesson-share-"+o}),{i18n:k}=(0,m.Z)();return n.createElement("div",{className:r},n.createElement("div",{className:i},n.createElement(p.Z,{id:"component.QuizProgress.time"},"Time: "),"zh"===k.currentLocale?s()(u,"data.lesson.estimated_time"):null==(t=s()(u,"data.lesson.estimated_time"))?void 0:t.replace("\u5206\u949f"," minutes")),n.createElement("div",{className:l},n.createElement(p.Z,{id:"component.QuizProgress.score"},"Best Score: "),s()(u,"data.lesson.score_percent")))}},62398:(e,t,a)=>{a.d(t,{Ab:()=>l,EJ:()=>r,Ou:()=>n,UL:()=>o,nh:()=>i,p3:()=>d,uv:()=>c});const n="e1faa656-8c53-45f4-bb4f-950db92bee60",r="e7515bff-d35b-4cdd-8af1-9e58027e3456",i="248e4b33-169c-47cd-a5c0-08a759807e48",l="8848231c-f6c4-4bd4-9821-bfe7adf2d31d",o="050ff746-b6a6-4ad4-b208-492689b7341f",s="d6a7f8b4-dc00-45d4-888b-79a3d16529ca",d={[n]:"solidity-start",[s]:"solidity-advanced"},c={[n]:"Solidity Intro",[s]:"Solidity Advanced"}},50391:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>k,frontMatter:()=>s,metadata:()=>c,toc:()=>m});var n=a(87462),r=(a(67294),a(3905)),i=a(71135),l=a(35857),o=a(62398);const s={title:"5. Data Storage and Scope",tags:["solidity","basic","wtfacademy","storage/memory/calldata"]},d="WTF Solidity: 5. Data Storage and Scope",c={unversionedId:"read_subscan/readme",id:"read_subscan/readme",title:"5. Data Storage and Scope",description:'Recently, I have been relearning Solidity, consolidating the finer details, and also writing a "WTF Solidity Tutorial" for newbies to learn. Lectures are updated 1~3 times weekly.',source:"@site/docs/polkadot-js-start/04_read_subscan/readme.mdx",sourceDirName:"04_read_subscan",slug:"/read_subscan/",permalink:"/frontend-for-polkadot-js-ink-tutorial/en/polkadot-js-start/read_subscan/",draft:!1,editUrl:"https://github.com/NeoSmithX/frontend-for-polkadot-js-ink-tutorial/docs/polkadot-js-start/04_read_subscan/readme.mdx",tags:[{label:"solidity",permalink:"/frontend-for-polkadot-js-ink-tutorial/en/polkadot-js-start/tags/solidity"},{label:"basic",permalink:"/frontend-for-polkadot-js-ink-tutorial/en/polkadot-js-start/tags/basic"},{label:"wtfacademy",permalink:"/frontend-for-polkadot-js-ink-tutorial/en/polkadot-js-start/tags/wtfacademy"},{label:"storage/memory/calldata",permalink:"/frontend-for-polkadot-js-ink-tutorial/en/polkadot-js-start/tags/storage-memory-calldata"}],version:"current",frontMatter:{title:"5. Data Storage and Scope",tags:["solidity","basic","wtfacademy","storage/memory/calldata"]},sidebar:"tutorialSidebar",previous:{title:"4. Function Output",permalink:"/frontend-for-polkadot-js-ink-tutorial/en/polkadot-js-start/first_tx/"}},p={},m=[{value:"Reference types in Solidity",id:"reference-types-in-solidity",level:2},{value:"Data location",id:"data-location",level:2},{value:"Data location and assignment behaviour",id:"data-location-and-assignment-behaviour",level:3},{value:"Variable scope",id:"variable-scope",level:2},{value:"1. State variables",id:"1-state-variables",level:3},{value:"2. Local variable",id:"2-local-variable",level:3},{value:"3. Global variable",id:"3-global-variable",level:3},{value:"Summary",id:"summary",level:2}],u={toc:m};function k(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"wtf-solidity-5-data-storage-and-scope"},"WTF Solidity: 5. Data Storage and Scope"),(0,r.kt)(i.Z,{courseId:o.Ou,lessonId:o.UL,mdxType:"QuizProgress"}),(0,r.kt)("p",null,'Recently, I have been relearning Solidity, consolidating the finer details, and also writing a "WTF Solidity Tutorial" for newbies to learn. Lectures are updated 1~3 times weekly. '),(0,r.kt)("p",null,"Everyone is welcomed to follow my Twitter: ",(0,r.kt)("a",{parentName:"p",href:"https://twitter.com/0xAA_Science"},"@0xAA_Science")),(0,r.kt)("p",null,"WTF Academy Discord: ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/5akcruXrsk"},"Link")),(0,r.kt)("p",null,"All codebase and tutorial notes are open source and available on GitHub (At 1024 repo stars, course certification is unlocked. At 2048 repo stars, community NFT is unlocked.): ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AmazingAng/WTFSolidity"},"github.com/AmazingAng/WTFSolidity"),"\\"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"reference-types-in-solidity"},"Reference types in Solidity"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Reference Type"),": Reference types differ from value types in that they do not store values directly on their own. Instead, reference types store the address/pointer of the data\u2019s location and do not directly share the data. You can modify the underlying data with different variable names. Reference types ",(0,r.kt)("inlineCode",{parentName:"p"},"array"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"struct")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"mapping"),", which take up a lot of storage space. We need to deal with the location of the data storage when using them."),(0,r.kt)("h2",{id:"data-location"},"Data location"),(0,r.kt)("p",null,"There are three types of data storage locations in solidity: ",(0,r.kt)("inlineCode",{parentName:"p"},"storage"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"memory")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"calldata"),". Gas costs are different for different storage locations. "),(0,r.kt)("p",null,"The data of a ",(0,r.kt)("inlineCode",{parentName:"p"},"storage")," variable is stored on-chain, similar to the hard disk of a computer, and consumes a lot of ",(0,r.kt)("inlineCode",{parentName:"p"},"gas"),"; while the data of ",(0,r.kt)("inlineCode",{parentName:"p"},"memory")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"calldata")," variables are temporarily stored in memory, consumes less ",(0,r.kt)("inlineCode",{parentName:"p"},"gas"),". "),(0,r.kt)("p",null,"General usage:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"storage"),": The state variables are ",(0,r.kt)("inlineCode",{parentName:"p"},"storage")," by default, which are stored on-chain. ")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"memory"),": The parameters and temporary variables in the function generally use ",(0,r.kt)("inlineCode",{parentName:"p"},"memory")," label, which is stored in memory and not on-chain. ")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"calldata"),": Similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"memory"),", stored in memory, not on-chain. The difference from ",(0,r.kt)("inlineCode",{parentName:"p"},"memory")," is that ",(0,r.kt)("inlineCode",{parentName:"p"},"calldata")," variables cannot be modified, and is generally used for function parameters. Example:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"    function fCalldata(uint[] calldata _x) public pure returns(uint[] calldata){\n        //The parameter is the calldata array, which cannot be modified.\n        // _x[0] = 0 //This modification will report an error.\n        return(_x);\n    }\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:"),"\n",(0,r.kt)("img",{alt:"5-1.png",src:a(25993).Z,width:"1210",height:"818"})),(0,r.kt)("h3",{id:"data-location-and-assignment-behaviour"},"Data location and assignment behaviour"),(0,r.kt)("p",null,"Data locations are not only relevant for persistency of data, but also for the semantics of assignments:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"When ",(0,r.kt)("inlineCode",{parentName:"li"},"storage")," (a state variable of the contract) is assigned to the local ",(0,r.kt)("inlineCode",{parentName:"li"},"storage")," (in a function), a reference will be created, and changing value of the new variable will affect the original one. Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"    uint[] x = [1,2,3]; // state variable: array x\n\n    function fStorage() public{\n        //Declare a storage variable xStorage, pointing to x. Modifying xStorage will also affect x\n        uint[] storage xStorage = x;\n        xStorage[0] = 100;\n    }\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:"),"\n",(0,r.kt)("img",{alt:"5-2.png",src:a(51382).Z,width:"1239",height:"734"})),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Assigning ",(0,r.kt)("inlineCode",{parentName:"li"},"storage")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"memory")," creates independent copies, and changes to one will not affect the other; and vice versa. Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"    uint[] x = [1,2,3]; // state variable: array x\n    \n    function fMemory() public view{\n        //Declare a variable xMemory of Memory, copy x. Modifying xMemory will not affect x\n        uint[] memory xMemory = x;\n        xMemory[0] = 100;\n    }\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:"),"\n",(0,r.kt)("img",{alt:"5-3.png",src:a(89691).Z,width:"1141",height:"860"})),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Assigning ",(0,r.kt)("inlineCode",{parentName:"p"},"memory")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"memory")," will create a reference, and changing the new variable will affect the original variable.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Otherwise, assigning a variable to ",(0,r.kt)("inlineCode",{parentName:"p"},"storage")," will create independent copies, and modifying one will not affect the other."))),(0,r.kt)("h2",{id:"variable-scope"},"Variable scope"),(0,r.kt)("p",null,"There are three types of variables in ",(0,r.kt)("inlineCode",{parentName:"p"},"Solidity")," according to their scope: state variables, local variables, and global variables."),(0,r.kt)("h3",{id:"1-state-variables"},"1. State variables"),(0,r.kt)("p",null,"State variables are variables whose data is stored on-chain and can be accessed by in-contract functions, but their ",(0,r.kt)("inlineCode",{parentName:"p"},"gas")," consumption is high. "),(0,r.kt)("p",null,"State variables are declared inside the contract and outside the functions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"contract Variables {\n    uint public x = 1;\n    uint public y;\n    string public z;\n")),(0,r.kt)("p",null,"We can change the value of the state variable in a function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'    function foo() external{\n        // You can change the value of the state variable in the function\n        x = 5;\n        y = 2;\n        z = "0xAA";\n    }\n')),(0,r.kt)("h3",{id:"2-local-variable"},"2. Local variable"),(0,r.kt)("p",null,"Local variables are variables that are only valid during function execution; they are invalid after function exit. The data of local variables are stored in memory, not on-chain, and their ",(0,r.kt)("inlineCode",{parentName:"p"},"gas")," consumption is low. "),(0,r.kt)("p",null,"Local variables are declared inside a function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"    function bar() external pure returns(uint){\n        uint xx = 1;\n        uint yy = 3;\n        uint zz = xx + yy;\n        return(zz);\n    }\n")),(0,r.kt)("h3",{id:"3-global-variable"},"3. Global variable"),(0,r.kt)("p",null,"Global variables are variables that work in the global scope and are reserved keywords for ",(0,r.kt)("inlineCode",{parentName:"p"},"solidity"),". They can be used directly in functions without declaring them:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"    function global() external view returns(address, uint, bytes memory){\n        address sender = msg.sender;\n        uint blockNum = block.number;\n        bytes memory data = msg.data;\n        return(sender, blockNum, data);\n    }\n")),(0,r.kt)("p",null,"In the above example, we use three global variables: ",(0,r.kt)("inlineCode",{parentName:"p"},"msg.sender"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"block.number")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"msg.data"),", which represent the sender of the message (current call), current block height, and complete calldata. "),(0,r.kt)("p",null,"Below are some commonly used global variables:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"blockhash(uint blockNumber)"),": (",(0,r.kt)("inlineCode",{parentName:"li"},"bytes32"),")         The hash of the given block - only applies to the 256 most recent block. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"block.coinbase"),"             : (",(0,r.kt)("inlineCode",{parentName:"li"},"address payable"),") The address of the current block miner"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"block.gaslimit"),"             : (",(0,r.kt)("inlineCode",{parentName:"li"},"uint"),")            The gaslimit of the current block"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"block.number"),"               : (",(0,r.kt)("inlineCode",{parentName:"li"},"uint"),")            Current block number"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"block.timestamp"),"            : (",(0,r.kt)("inlineCode",{parentName:"li"},"uint"),")            The timestamp of the current block, in seconds since the unix epoch"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"gasleft()"),"                  : (",(0,r.kt)("inlineCode",{parentName:"li"},"uint256"),")         Remaining gas"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg.data"),"                   : (",(0,r.kt)("inlineCode",{parentName:"li"},"bytes calldata"),")  Complete calldata"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg.sender"),"                 : (",(0,r.kt)("inlineCode",{parentName:"li"},"address payable"),") Message sender (current caller)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg.sig"),"                    : (",(0,r.kt)("inlineCode",{parentName:"li"},"bytes4"),")          first four bytes of the calldata (i.e. function identifier)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg.value"),"                  : (",(0,r.kt)("inlineCode",{parentName:"li"},"bytes4"),")          number of wei sent with the message")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:"),"\n",(0,r.kt)("img",{alt:"5-4.png",src:a(95085).Z,width:"1087",height:"1235"})),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"In this chapter, we introduced reference types, data storage locations and variable scopes in ",(0,r.kt)("inlineCode",{parentName:"p"},"solidity"),". There are three types of data storage locations: ",(0,r.kt)("inlineCode",{parentName:"p"},"storage"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"memory")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"calldata"),". Gas costs are different for different storage locations. The variable scope include state variables, local variables and global variables."),(0,r.kt)(l.Z,{courseId:o.Ou,lessonId:o.UL,mdxType:"QuizForm"}))}k.isMDXComponent=!0},25993:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/5-1-3275ad761b4b910c0b71100a740008c7.png"},51382:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/5-2-cb55dcb2efecb55d366270f77c9ac3e9.png"},89691:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/5-3-24e828e530b9beff56f5d7bd225f3554.png"},95085:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/5-4-14d088ccab53ac87997d5442c9c2efb0.png"}}]);